---
- name: Get latest raw data
  ansible.builtin.uri:
    url: https://api.github.com/repos/dandavison/delta/releases/latest
  register: latest_delta_raw_data
  changed_when: false

- name: Get latest version
  ansible.builtin.set_fact:
    latest_delta_ver: "{{ latest_delta_raw_data.json.tag_name }}"

- name: Get system version
  ansible.builtin.shell:
    cmd: set -o pipefail && $(which delta) --version | grep -oP 'delta\s+\K[\d.]+'
  args:
    executable: /bin/bash
  register: sys_delta_ver
  changed_when: false
  failed_when: false

- name: Fix locked version by removing 'v' prefix
  ansible.builtin.set_fact:
    delta:
      version: "{{ delta.version | regex_replace('^v', '') }}"
  when: delta.version is defined and delta.version | regex_search('^v')

- name: Set target version according to locked configuration
  ansible.builtin.set_fact:
    target_delta_ver: "{{ delta.version }}"
  when: delta.version is defined and delta.version != 'latest'

- name: Set target version to latest {{ latest_delta_ver }}
  ansible.builtin.set_fact:
    target_delta_ver: "{{ latest_delta_ver }}"
  when: target_delta_ver is not defined

- name: Set validity for installation
  ansible.builtin.set_fact:
    install_delta: "{{ sys_delta_ver.stdout != target_delta_ver }}"

- name: Show versions and installation status
  ansible.builtin.debug:
    msg:
      - "locked version             : {{ delta.version if delta.version is defined else '' }}"
      - "system version             : {{ sys_delta_ver.stdout }}"
      - "latest version             : {{ latest_delta_ver }}"
      - "should install/update      : {{ install_delta }}"
      - "install version            : {{ target_delta_ver if install_delta else '' }}"

- name: Installation by extracting binaries
  when: install_delta
  block:
    - name: Set target architecture
      ansible.builtin.set_fact:
        target_arch: "{{ ansible_architecture | replace('arm64', 'aarch64') }}"

    - name: Set target os
      ansible.builtin.set_fact:
        target_os: "{{ ansible_os_family | replace('Debian', 'unknown-linux-gnu') | replace('Darwin', 'apple-darwin') }}"

    - name: Set archive file name
      ansible.builtin.set_fact:
        target_archive_name: "delta-{{ target_delta_ver }}-{{ target_arch }}-{{ target_os }}"

    - name: Download target version {{ target_delta_ver }}
      ansible.builtin.get_url:
        url: "https://github.com/dandavison/delta/releases/download/{{ target_delta_ver }}/{{ target_archive_name }}.tar.gz"
        dest: "{{ tmp_folder_path }}/delta.tar.gz"
        mode: "0644"

    - name: Extract from archive
      ansible.builtin.unarchive:
        src: "{{ tmp_folder_path }}/delta.tar.gz"
        dest: "{{ tmp_folder_path }}"
        remote_src: true
        creates: "{{ tmp_folder_path }}/{{ target_archive_name }}/delta"

    - name: Copy to {{ target_local_bin_path }}
      become: true
      ansible.builtin.copy:
        remote_src: true
        src: "{{ tmp_folder_path }}/{{ target_archive_name }}/delta"
        dest: "{{ target_local_bin_path }}"
        mode: "0755"

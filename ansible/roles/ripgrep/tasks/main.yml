---
- name: Get latest version
  ansible.builtin.uri:
    url: https://api.github.com/repos/BurntSushi/ripgrep/releases/latest
  register: latest_ripgrep_raw_data
  changed_when: false

- name: Register latest version
  ansible.builtin.set_fact:
    latest_ripgrep_ver: "{{ latest_ripgrep_raw_data.json.tag_name }}"

- name: Get system version
  ansible.builtin.shell:
    cmd: set -o pipefail && $(which rg) --version | grep -oP '\d+\.\d+\.\d+'
  args:
    executable: /bin/bash
  register: sys_ripgrep_ver
  changed_when: false
  failed_when: false

- name: Fix locked version by removing 'v' prefix
  ansible.builtin.set_fact:
    ripgrep:
      version: "{{ ripgrep.version | regex_replace('^v', '') }}"
  when: ripgrep.version is defined and ripgrep.version | regex_search('^v')

- name: Set target version according to locked configuration
  ansible.builtin.set_fact:
    target_ripgrep_ver: "{{ ripgrep.version }}"
  when: ripgrep.version is defined and ripgrep.version != 'latest'

- name: Set the target version to latest {{ latest_ripgrep_ver }}
  ansible.builtin.set_fact:
    target_ripgrep_ver: "{{ latest_ripgrep_ver }}"
  when: target_ripgrep_ver is not defined

- name: Set validity for installation
  ansible.builtin.set_fact:
    install_ripgrep: "{{ sys_ripgrep_ver.stdout != target_ripgrep_ver }}"

- name: Show versions and installation status
  ansible.builtin.debug:
    msg:
      - "locked version             : {{ ripgrep.version if ripgrep.version is defined else '' }}"
      - "system version             : {{ sys_ripgrep_ver.stdout }}"
      - "latest version             : {{ latest_ripgrep_ver }}"
      - "should install/update      : {{ install_ripgrep }}"
      - "install version            : {{ target_ripgrep_ver if install_ripgrep else '' }}"

- name: Installation
  when: install_ripgrep
  block:
    - name: Set target architecture
      ansible.builtin.set_fact:
        target_arch: "{{ ansible_architecture }}"

    - name: Set target os
      ansible.builtin.set_fact:
        target_os: "{{ ansible_os_family | replace('Debian', 'unknown-linux-musl') | replace('Darwin', 'apple-darwin') }}"

    - name: Set ripgrep_archive_name
      ansible.builtin.set_fact:
        ripgrep_archive_name: "ripgrep-{{ target_ripgrep_ver }}-{{ target_arch }}-{{ target_os }}.tar.gz"

    - name: Download target version {{ target_ripgrep_ver }}
      ansible.builtin.get_url:
        url: "https://github.com/BurntSushi/ripgrep/releases/download/{{ target_ripgrep_ver }}/{{ ripgrep_archive_name }}"
        dest: "{{ tmp_folder_path }}/ripgrep.tar.gz"
        mode: "0644"

    - name: Extract from archive
      ansible.builtin.unarchive:
        src: "{{ tmp_folder_path }}/ripgrep.tar.gz"
        dest: "{{ tmp_folder_path }}"
        remote_src: true
        creates: "{{ tmp_folder_path }}/ripgrep-{{ target_ripgrep_ver }}-{{ target_arch }}-{{ target_os }}/rg"

    - name: Copy to {{ target_local_bin_path }}
      become: true
      ansible.builtin.copy:
        remote_src: true
        src: "{{ tmp_folder_path }}/ripgrep-{{ target_ripgrep_ver }}-{{ target_arch }}-{{ target_os }}/rg"
        dest: "{{ target_local_bin_path }}"
        mode: "0755"

    - name: Copy zsh completion file to {{ zsh_completions_path }}
      become: true
      ansible.builtin.copy:
        remote_src: true
        src: "{{ tmp_folder_path }}/ripgrep-{{ target_ripgrep_ver }}-{{ target_arch }}-{{ target_os }}/complete/_rg"
        dest: "{{ zsh_completions_path }}"
        mode: "0644"
